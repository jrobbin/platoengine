/*
 * Plato_Test_OptimalityCriteria.cpp
 *
 *  Created on: Oct 21, 2017
 */

#include "gtest/gtest.h"

#include "Plato_UnitTestUtils.hpp"

#include "Plato_DataFactory.hpp"
#include "Plato_CriterionList.hpp"
#include "Plato_OptimalityCriteria.hpp"
#include "Plato_StandardMultiVector.hpp"
#include "Plato_OptimalityCriteriaDataMng.hpp"
#include "Plato_OptimalityCriteriaStageMng.hpp"
#include "Plato_HostOptimalityCriteriaUpdate.hpp"
#include "Plato_NonlinearProgrammingSubProblemOC.hpp"
#include "Plato_SingleConstraintSubProblemTypeLP.hpp"
#include "Plato_StandardVectorReductionOperations.hpp"
#include "Plato_OptimalityCriteriaTestObjectiveOne.hpp"
#include "Plato_OptimalityCriteriaTestObjectiveTwo.hpp"
#include "Plato_OptimalityCriteriaTestInequalityOne.hpp"
#include "Plato_OptimalityCriteriaTestInequalityTwo.hpp"

namespace PlatoTest
{

void setSynthesisOptimizationTestGold(std::vector<double> & aControl, std::vector<double> & aDual)
{
    aDual =
    {   4.74661646876484};
    aControl =
    {   0.317477885589482, 0.207954382679673, 0.299197172917957, 0.325476260321467, 0.66176883758507,
        0.411004582049382, 0.447294518265577, 0.584317693536738, 0.110012898824819, 0.184096211476734,
        0.124899084946842, 0.214068150545226, 0.0641756159101544, 0.116134924735706,
        0.0702652018782969, 0.12150703000479, 0.0228067800705161, 0.0637574085708076,
        0.0270476367004976, 0.0666102279071945, 0.43510401629518, 0.357545383240778,
        0.478158598048052, 0.392873333726619, 0.360162041173859, 0.379546965520694, 0.198800556508025,
        0.205266532783654, 0.136416095425716, 0.140342432168548, 0.483480072252176, 0.394221839183865,
        0.491489153023143, 0.404309389440749, 0.467227521161194, 0.471211116559758, 0.310276021854141,
        0.311166945868627, 0.205431864108151, 0.209653024013675, 0.457173340410786, 0.372611748448717,
        0.458368254210352, 0.376496515107541, 0.487564228633468, 0.485695120516685, 0.408216316876495,
        0.407384840401303, 0.340700664378577, 0.341570357536306, 0.413106574736685, 0.34519680672192,
        0.411401028602337, 0.346466277287213, 0.461976451381207, 0.457779693676495, 0.462017620532261,
        0.458489805634834, 0.450398676844412, 0.448039485633651, 0.377982924972077, 0.328482388803925,
        0.375336727475848, 0.32846874444544, 0.428158043782532, 0.423182010022676, 0.489011442648907,
        0.483354474824634, 0.529503589943445, 0.524004941060784, 0.353792197412347, 0.322049336581105,
        0.35083485931483, 0.320932057912769, 0.398800329012078, 0.39364048219582, 0.503011707905376,
        0.496040167361705, 0.583164211499535, 0.575610362163216, 0.339163825470245, 0.3228964891693,
        0.335888489717279, 0.320685752797874, 0.379980521993419, 0.37462463698089, 0.518490708195363,
        0.510828176780883, 0.627192472386612, 0.618655789893426, 0.331241272077811, 0.326256778730897,
        0.327643855502932, 0.323060165227801, 0.377024139794816, 0.371572272087027, 0.556651105446063,
        0.548979072621613, 0.638423247105957, 0.631015362441974, 0.324241858621634, 0.324489395784059,
        0.320922920794708, 0.321003848199836, 0.391675677132743, 0.387229931188792, 0.573625418264052,
        0.568883652162072, 0.660852298207612, 0.65601006163839, 0.312930201479397, 0.308941613003311,
        0.311964725818561, 0.307000400605044, 0.420558335550519, 0.419997683568188, 0.60664681977396,
        0.605596231050013, 0.704132623207357, 0.703345576575702, 0.295746682690694, 0.269598571480044,
        0.301521535782511, 0.27215133483628, 0.445969812106578, 0.45171315823928, 0.647850692305276,
        0.656199128332435, 0.754939410637286, 0.764273192151143, 0.270434153536175, 0.206490980007819,
        0.281921349714135, 0.213039792663485, 0.473493254241957, 0.483994170911319, 0.722588488290097,
        0.737280092551866, 0.8, 0.8, 0.238683866427276, 0.134380304854087, 0.239213157711953,
        0.14009398694934, 0.457690321112899, 0.457173020412684, 0.8, 0.8, 0.8, 0.8, 0.215440229573717,
        0.0986100651134861, 0.202841765817145, 0.102652814111658, 0.419880966678257,
        0.404820387624143, 0.8, 0.8, 0.8, 0.8, 0.0986100651134866, 0.215440229573715,
        0.238683866427275, 0.134380304854088, 0.102652814111658, 0.202841765817143, 0.239213157711951,
        0.140093986949341, 0.419880966678239, 0.45769032111288, 0.404820387624131, 0.457173020412671,
        0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.270434153536175, 0.206490980007823,
        0.281921349714134, 0.213039792663488, 0.473493254241939, 0.483994170911305, 0.722588488290081,
        0.737280092551857, 0.8, 0.8, 0.295746682690682, 0.269598571480052, 0.3015215357825,
        0.272151334836285, 0.445969812106562, 0.451713158239266, 0.647850692305265, 0.656199128332429,
        0.754939410637277, 0.764273192151142, 0.312930201479383, 0.308941613003322, 0.311964725818547,
        0.307000400605052, 0.420558335550503, 0.419997683568172, 0.606646819773954, 0.60559623105001,
        0.704132623207354, 0.703345576575706, 0.324241858621618, 0.324489395784073, 0.320922920794692,
        0.321003848199846, 0.39167567713273, 0.387229931188778, 0.573625418264051, 0.568883652162074,
        0.660852298207612, 0.656010061638395, 0.331241272077795, 0.32625677873091, 0.327643855502917,
        0.32306016522781, 0.377024139794803, 0.371572272087014, 0.556651105446055, 0.548979072621604,
        0.638423247105958, 0.631015362441975, 0.339163825470232, 0.322896489169304, 0.335888489717267,
        0.320685752797882, 0.379980521993405, 0.374624636980877, 0.518490708195362, 0.510828176780881,
        0.627192472386636, 0.618655789893441, 0.35379219741234, 0.322049336581146, 0.350834859314821,
        0.320932057912799, 0.398800329012081, 0.393640482195812, 0.503011707905394, 0.49604016736171,
        0.583164211499558, 0.575610362163229, 0.377982924972055, 0.328482388803976, 0.375336727475821,
        0.32846874444548, 0.428158043782545, 0.42318201002265, 0.489011442648935, 0.483354474824632,
        0.529503589943451, 0.524004941060784, 0.413106574736669, 0.345196806721961, 0.411401028602302,
        0.346466277287255, 0.461976451381237, 0.457779693676468, 0.462017620532292, 0.458489805634846,
        0.450398676844401, 0.448039485633662, 0.457173340410762, 0.372611748448756, 0.45836825421034,
        0.376496515107566, 0.487564228633524, 0.485695120516723, 0.408216316876507, 0.407384840401312,
        0.340700664378504, 0.341570357536265, 0.48348007225206, 0.394221839183853, 0.49148915302311,
        0.404309389440719, 0.467227521161161, 0.471211116559831, 0.310276021854162, 0.311166945868686,
        0.205431864108144, 0.209653024013661, 0.435104016295099, 0.357545383240881, 0.478158598048071,
        0.392873333726662, 0.360162041173743, 0.379546965520803, 0.198800556508004, 0.205266532783638,
        0.136416095425703, 0.140342432168525, 0.299197172917926, 0.325476260321828, 0.447294518265589,
        0.584317693537011, 0.18409621147665, 0.214068150545244, 0.116134924735685, 0.121507030004776,
        0.06375740857078, 0.0666102279071577, 0.207954382679645, 0.317477885590039, 0.411004582049348,
        0.661768837585402, 0.110012898824818, 0.124899084946834, 0.0641756159101412,
        0.0702652018782877, 0.0228067800704654, 0.0270476367004326, 0.697548481957385,
        0.361105198695964, 0.311389980263469, 0.595876683496925, 0.290653681157498, 0.311938646929381,
        0.341993915198495, 0.353604415855126, 0.33414941395648, 0.33872821203703, 0.317979908371099,
        0.320388547984347, 0.309261579103412, 0.310336821643868, 0.310060395147995, 0.309679466799925,
        0.317541682360309, 0.315644451707898, 0.325813750436203, 0.322569709853207, 0.326937806303557,
        0.323079067099787, 0.310181465767223, 0.307456696298836, 0.264190340151528, 0.265461540962987,
        0.189088107283502, 0.194818731604174, 0.108099284394356, 0.11517932876175, 0.0806440730635807,
        0.0833029722133896, 0.106594315291957, 0.145807207789946, 0.239741811775478,
        0.189836261547056, 0.21955943287262, 0.293140982168938, 0.274702639803413, 0.307284640625925,
        0.305052785748796, 0.310998360936118, 0.317505532654372, 0.317603953627756, 0.3198422081393,
        0.324046079786429, 0.318436203572393, 0.332609975703826, 0.319746571878722, 0.347865189679294,
        0.328350231342951, 0.372652831624893, 0.347600642480181, 0.409576505881641, 0.3802357822609,
        0.459198138732014, 0.414278719924145, 0.498782307453051, 0.428063460162581, 0.521204816443147,
        0.753563371844504, 0.590978970804426, 0.8, 0.611172806847976, 0.45665516128698,
        0.374868802617776, 0.494271994525779, 0.457384374974078, 0.419426874196016, 0.382764718222217,
        0.366095910349089, 0.369249310529507, 0.388473047889288, 0.418205573070382, 0.453521820912679,
        0.48341541416125, 0.474252676640963, 0.398535848265338, 0.244033112648206, 0.147123873186615,
        0.797354591211858, 0.793537332689844, 0.751684563049298, 0.664442662237631, 0.604543816238233,
        0.564102021596904, 0.541236990399036, 0.503083330393126, 0.489005430207222, 0.47767655549197,
        0.454954948260498, 0.406354959639998, 0.311503311751749, 0.211534862991375, 0.126651304113239,
        0.0758669636324816, 0.8, 0.8, 0.8, 0.773494336225637, 0.702557648115049, 0.651131810495271,
        0.623519458327275, 0.61001145639983, 0.567963752013108, 0.518463807597503, 0.44568028308462,
        0.342345524313938, 0.21394979138617, 0.144161798093729, 0.0693456131629021,
        0.0307064843491377, 0.102652814111659, 0.140093986949341, 0.239213157711953,
        0.202841765817145, 0.213039792663486, 0.281921349714135, 0.272151334836281, 0.301521535782503,
        0.307000400605044, 0.311964725818551, 0.321003848199836, 0.3209229207947, 0.323060165227801,
        0.327643855502925, 0.320685752797875, 0.335888489717274, 0.320932057912776, 0.350834859314835,
        0.328468744445443, 0.375336727475854, 0.346466277287218, 0.411401028602357, 0.376496515107527,
        0.458368254210368, 0.404309389440793, 0.491489153023173, 0.392873333726673, 0.478158598048096,
        0.584317693536872, 0.447294518265605, 0.661768837585279, 0.411004582049406, 0.457173020412673,
        0.404820387624134, 0.483994170911308, 0.451713158239269, 0.419997683568178, 0.387229931188785,
        0.371572272087026, 0.374624636980895, 0.393640482195829, 0.42318201002267, 0.457779693676521,
        0.485695120516729, 0.471211116559752, 0.379546965520711, 0.214068150545215, 0.124899084946832,
        0.8, 0.8, 0.737280092551856, 0.656199128332428, 0.605596231050008, 0.56888365216207,
        0.54897907262161, 0.510828176780889, 0.496040167361715, 0.483354474824631, 0.458489805634835,
        0.407384840401303, 0.311166945868648, 0.205266532783646, 0.121507030004784,
        0.0702652018782934, 0.8, 0.8, 0.8, 0.764273192151137, 0.7033455765757, 0.656010061638388,
        0.631015362441969, 0.618655789893429, 0.575610362163231, 0.524004941060803, 0.448039485633638,
        0.341570357536291, 0.209653024013663, 0.140342432168537, 0.0666102279071866,
        0.0270476367005009, 0.8, 0.753563371844668, 0.590978970804426, 0.611172806847936,
        0.428063460162584, 0.521204816443177, 0.414278719924137, 0.498782307453069, 0.380235782260955,
        0.459198138732045, 0.347600642480206, 0.40957650588162, 0.328350231342971, 0.372652831624879,
        0.319746571878741, 0.347865189679289, 0.318436203572401, 0.332609975703818, 0.319842208139305,
        0.32404607978642, 0.317505532654375, 0.317603953627747, 0.305052785748798, 0.31099836093611,
        0.274702639803413, 0.307284640625919, 0.21955943287262, 0.293140982168937, 0.145807207789945,
        0.239741811775477, 0.106594315291956, 0.189836261547055, 0.244033112648278, 0.147123873186534,
        0.398535848265561, 0.474252676641055, 0.483415414161236, 0.453521820912648, 0.418205573070355,
        0.388473047889264, 0.369249310529495, 0.366095910349085, 0.382764718222215, 0.419426874196011,
        0.457384374974074, 0.494271994525775, 0.456655161286977, 0.374868802617773, 0.126651304113243,
        0.0758669636324907, 0.21153486299137, 0.311503311751813, 0.406354959639957, 0.454954948260518,
        0.477676555491964, 0.489005430207214, 0.503083330393128, 0.541236990399037, 0.564102021596916,
        0.60454381623824, 0.664442662237635, 0.7516845630493, 0.797354591211857, 0.793537332689843,
        0.0693456131628949, 0.0307064843491241, 0.144161798093718, 0.213949791386168,
        0.342345524313907, 0.445680283084673, 0.518463807597503, 0.567963752013114, 0.610011456399848,
        0.623519458327286, 0.651131810495287, 0.70255764811506, 0.773494336225645, 0.8, 0.8, 0.8,
        0.661768837585243, 0.584317693536914, 0.447294518265604, 0.411004582049457, 0.392873333726673,
        0.478158598048015, 0.40430938944077, 0.491489153023112, 0.37649651510755, 0.458368254210383,
        0.346466277287214, 0.411401028602349, 0.328468744445439, 0.375336727475835, 0.320932057912775,
        0.350834859314818, 0.320685752797878, 0.33588848971727, 0.323060165227802, 0.327643855502922,
        0.321003848199832, 0.320922920794697, 0.307000400605039, 0.311964725818549, 0.272151334836278,
        0.301521535782501, 0.213039792663484, 0.281921349714134, 0.140093986949339, 0.239213157711952,
        0.102652814111657, 0.202841765817144, 0.214068150545243, 0.124899084946851, 0.379546965520766,
        0.471211116559753, 0.485695120516698, 0.457779693676533, 0.423182010022684, 0.39364048219582,
        0.374624636980892, 0.371572272087027, 0.387229931188791, 0.419997683568184, 0.451713158239276,
        0.483994170911315, 0.45717302041268, 0.404820387624141, 0.121507030004789, 0.070265201878301,
        0.205266532783645, 0.311166945868682, 0.407384840401281, 0.458489805634877, 0.483354474824661,
        0.49604016736173, 0.5108281767809, 0.548979072621622, 0.568883652162091, 0.605596231050025,
        0.656199128332443, 0.737280092551869, 0.8, 0.8, 0.0666102279072013, 0.0270476367005362,
        0.140342432168543, 0.209653024013675, 0.341570357536282, 0.448039485633704, 0.524004941060816,
        0.575610362163247, 0.618655789893451, 0.631015362441996, 0.656010061638415, 0.703345576575722,
        0.764273192151156, 0.8, 0.8, 0.8, 0.69754848195739, 0.8, 0.724573200837347, 0.595876683496951,
        0.332959485603416, 0.311938646929432, 0.365214887996959, 0.353604415855141, 0.343246260996815,
        0.33872821203699, 0.322665977486822, 0.320388547984315, 0.311273232623816, 0.310336821643841,
        0.309198055248962, 0.309679466799912, 0.313685819476162, 0.315644451707898, 0.319288537292756,
        0.322569709853202, 0.319193888286159, 0.323079067099778, 0.304711282779163, 0.307456696298829,
        0.266730554892858, 0.265461540962983, 0.200535920617877, 0.194818731604172, 0.122221513206514,
        0.115179328761749, 0.0858794942706358, 0.0833029722133893, 0.317477885589973,
        0.207954382679653, 0.325476260321705, 0.299197172917945, 0.110012898824792, 0.184096211476668,
        0.0641756159101523, 0.116134924735697, 0.0228067800705171, 0.0637574085708072,
        0.357545383240912, 0.435104016295216, 0.360162041173837, 0.198800556508013, 0.13641609542571,
        0.39422183918401, 0.483480072252177, 0.467227521161174, 0.310276021854184, 0.205431864108189,
        0.372611748448756, 0.457173340410812, 0.487564228633514, 0.408216316876467, 0.340700664378507,
        0.345196806721939, 0.413106574736742, 0.461976451381284, 0.462017620532259, 0.450398676844345,
        0.328482388803952, 0.377982924972114, 0.428158043782569, 0.48901144264892, 0.529503589943453,
        0.322049336581132, 0.353792197412374, 0.398800329012098, 0.503011707905383, 0.58316421149955,
        0.322896489169297, 0.339163825470234, 0.379980521993421, 0.518490708195361, 0.627192472386606,
        0.326256778730895, 0.331241272077801, 0.377024139794813, 0.556651105446055, 0.638423247105951,
        0.324489395784056, 0.324241858621624, 0.391675677132735, 0.573625418264047, 0.660852298207605,
        0.30894161300331, 0.312930201479385, 0.420558335550508, 0.606646819773951, 0.704132623207347,
        0.269598571480045, 0.295746682690684, 0.445969812106565, 0.647850692305264, 0.754939410637273,
        0.20649098000782, 0.270434153536174, 0.473493254241941, 0.722588488290079, 0.8,
        0.134380304854087, 0.238683866427277, 0.457690321112882, 0.8, 0.8, 0.0986100651134869,
        0.215440229573718, 0.419880966678239, 0.8, 0.8, 0.0986100651134845, 0.215440229573718,
        0.134380304854085, 0.238683866427276, 0.419880966678254, 0.457690321112895, 0.8, 0.8, 0.8,
        0.8, 0.206490980007818, 0.270434153536174, 0.473493254241953, 0.7225884882901, 0.8,
        0.26959857148004, 0.295746682690684, 0.445969812106575, 0.647850692305285, 0.7549394106373,
        0.308941613003302, 0.312930201479382, 0.420558335550513, 0.606646819773973, 0.704132623207377,
        0.32448939578405, 0.32424185862162, 0.391675677132735, 0.57362541826407, 0.66085229820764,
        0.326256778730895, 0.3312412720778, 0.37702413979481, 0.556651105446068, 0.638423247105983,
        0.322896489169296, 0.339163825470231, 0.379980521993424, 0.518490708195377, 0.627192472386623,
        0.32204933658111, 0.353792197412339, 0.398800329012108, 0.503011707905422, 0.583164211499573,
        0.328482388803934, 0.377982924972073, 0.428158043782587, 0.48901144264896, 0.529503589943473,
        0.345196806721923, 0.413106574736716, 0.461976451381285, 0.462017620532298, 0.450398676844405,
        0.372611748448703, 0.457173340410781, 0.487564228633497, 0.408216316876509, 0.340700664378543,
        0.39422183918393, 0.483480072252078, 0.467227521161179, 0.310276021854221, 0.205431864108148,
        0.357545383240891, 0.435104016295114, 0.360162041173848, 0.19880055650801, 0.13641609542571,
        0.325476260321602, 0.29919717291801, 0.184096211476699, 0.116134924735691, 0.063757408570804,
        0.317477885589683, 0.207954382679804, 0.110012898824816, 0.0641756159101406,
        0.0228067800705341, 0.361105198695961, 0.311389980263435, 0.290653681157574,
        0.341993915198628, 0.334149413956448, 0.317979908371061, 0.3092615791034, 0.310060395147989,
        0.317541682360308, 0.325813750436187, 0.326937806303538, 0.310181465767211, 0.264190340151523,
        0.1890881072835, 0.108099284394354, 0.0806440730635803};
}

void setSynthesisOptimizationTestData(Plato::OptimalityCriteriaDataMng<double> & aDataMng)
{
    size_t tOrdinalValue = 0;
    double tScalarValue = 5.22704438954413e-07;
    aDataMng.setCurrentConstraintValue(tOrdinalValue, tScalarValue);
    aDataMng.setPreviousConstraintValue(tOrdinalValue, tScalarValue);

    tScalarValue = 0.691256909912612;
    aDataMng.setCurrentObjectiveValue(tScalarValue);
    aDataMng.setPreviousObjectiveValue(tScalarValue);

    std::vector<double> tControlData = {0.40955724242133, 0.30113726357235, 0.307513194911913, 0.356900978460384, 0.6,
                                        0.45488234885782, 0.403202630426511, 0.532407316388349, 0.2, 0.209965957451401, 0.2,
                                        0.227161212219733, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.311253360111313,
                                        0.289507571747515, 0.325540957688401, 0.306598276027377, 0.267490918903231,
                                        0.269968561435964, 0.2, 0.2, 0.2, 0.2, 0.310054524637646, 0.289081283528481,
                                        0.306610396694154, 0.290201820067628, 0.293335892119644, 0.288021535834219,
                                        0.238204002643509, 0.233552983221075, 0.200161324410164, 0.2, 0.316221955771622,
                                        0.301218146408385, 0.312188971000583, 0.299792929631209, 0.312868218528258,
                                        0.307780454340325, 0.29228950521611, 0.288795161114084, 0.279797387551722,
                                        0.277828443800778, 0.327907538687534, 0.314454580311119, 0.324471515553989,
                                        0.311926574554406, 0.337126958363126, 0.333677155528935, 0.348894279811839,
                                        0.346884734327945, 0.357737027551844, 0.35677082657633, 0.343411921646254,
                                        0.325996391604727, 0.340509567247729, 0.323091010021528, 0.368217547305347,
                                        0.365895249370953, 0.408411565234622, 0.40736553139183, 0.433109506631168,
                                        0.43277839535455, 0.362246224683007, 0.336076578570479, 0.359670409887579,
                                        0.333065439362165, 0.404989678817975, 0.40323374515749, 0.469691444216152,
                                        0.46902768991803, 0.506554904401173, 0.506425631532035, 0.383946002276386,
                                        0.345617959198294, 0.381506103649019, 0.342556601290368, 0.445650009862628,
                                        0.44407182217913, 0.531826679511301, 0.531192700037323, 0.578674233182581,
                                        0.578472968935504, 0.407973967337065, 0.355274635865954, 0.405542440964138,
                                        0.352110296934323, 0.488844808265888, 0.48724240179917, 0.594599053486399,
                                        0.593784818144898, 0.6, 0.6, 0.433376601669734, 0.364602863792258, 0.431217012750125,
                                        0.361510039368473, 0.533428501647341, 0.532254262601707, 0.6, 0.6, 0.6, 0.6,
                                        0.457977518169904, 0.371294426455832, 0.457655358490568, 0.369287293178832,
                                        0.577914245904847, 0.578948699272922, 0.6, 0.6, 0.6, 0.6, 0.47477551266157,
                                        0.366390949205784, 0.480916495373089, 0.368552039466175, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,
                                        0.470434153536175, 0.340968854858943, 0.481921349714135, 0.348430382882091, 0.6, 0.6, 0.6,
                                        0.6, 0.6, 0.6, 0.438683866427276, 0.289387376138944, 0.439213157711953, 0.295198452178963,
                                        0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.415440229573717, 0.252782070415699, 0.402841765817145,
                                        0.253736911822441, 0.6, 0.597569383369633, 0.6, 0.6, 0.6, 0.6, 0.252782070415698,
                                        0.415440229573715, 0.438683866427275, 0.289387376138944, 0.25373691182244,
                                        0.402841765817143, 0.439213157711951, 0.295198452178962, 0.6, 0.6, 0.597569383369632, 0.6,
                                        0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.470434153536175, 0.340968854858943,
                                        0.481921349714134, 0.348430382882091, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.47477551266157,
                                        0.366390949205785, 0.480916495373088, 0.368552039466175, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,
                                        0.457977518169903, 0.371294426455833, 0.457655358490566, 0.369287293178833,
                                        0.577914245904847, 0.578948699272919, 0.6, 0.6, 0.6, 0.6, 0.433376601669733,
                                        0.36460286379226, 0.431217012750121, 0.361510039368474, 0.533428501647339,
                                        0.532254262601703, 0.6, 0.6, 0.6, 0.6, 0.407973967337061, 0.355274635865951,
                                        0.405542440964135, 0.35211029693432, 0.488844808265884, 0.487242401799165,
                                        0.594599053486393, 0.593784818144892, 0.6, 0.6, 0.383946002276386, 0.345617959198278,
                                        0.38150610364902, 0.342556601290361, 0.445650009862627, 0.444071822179127,
                                        0.531826679511302, 0.531192700037324, 0.578674233182594, 0.578472968935513,
                                        0.362246224683019, 0.336076578570495, 0.359670409887585, 0.333065439362174,
                                        0.404989678817995, 0.403233745157497, 0.469691444216171, 0.469027689918041,
                                        0.50655490440119, 0.506425631532047, 0.343411921646259, 0.325996391604749,
                                        0.340509567247727, 0.323091010021546, 0.368217547305378, 0.365895249370953,
                                        0.408411565234654, 0.407365531391844, 0.433109506631181, 0.432778395354561,
                                        0.327907538687556, 0.314454580311135, 0.324471515553991, 0.311926574554425,
                                        0.337126958363177, 0.333677155528941, 0.348894279811877, 0.346884734327966,
                                        0.357737027551847, 0.356770826576344, 0.316221955771636, 0.301218146408401,
                                        0.312188971000597, 0.299792929631211, 0.312868218528322, 0.307780454340367,
                                        0.292289505216139, 0.2887951611141, 0.27979738755168, 0.277828443800751,
                                        0.310054524637581, 0.289081283528444, 0.306610396694136, 0.29020182006758,
                                        0.29333589211964, 0.288021535834269, 0.238204002643544, 0.23355298322113,
                                        0.200161324410173, 0.2, 0.311253360111255, 0.289507571747538, 0.32554095768841,
                                        0.306598276027368, 0.267490918903155, 0.26996856143604, 0.2, 0.2, 0.2, 0.2,
                                        0.307513194911887, 0.356900978460541, 0.403202630426536, 0.532407316388414,
                                        0.209965957451315, 0.227161212219753, 0.2, 0.2, 0.2, 0.2, 0.301137263572315,
                                        0.409557242421531, 0.454882348857825, 0.6, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.6,
                                        0.444397822102827, 0.363243534639835, 0.569025478701078, 0.259216327802041,
                                        0.272754205196447, 0.271188229184294, 0.275715144672959, 0.290973213067434,
                                        0.290978794108877, 0.30748530385919, 0.305517872721092, 0.319117846719541,
                                        0.31629856858223, 0.326897141738074, 0.323771329681579, 0.33236654330783,
                                        0.329083514238572, 0.336552333593486, 0.333099222427099, 0.339388058798854,
                                        0.335874977641741, 0.337886262527742, 0.335035785648191, 0.324414997225477,
                                        0.324726076697547, 0.289392130886309, 0.295004131857119, 0.223865042052923,
                                        0.233321795031644, 0.2, 0.2, 0.254688172089915, 0.300897285498862, 0.439741811775478,
                                        0.389836261547056, 0.355735396248351, 0.493140982168938, 0.370700527932021,
                                        0.486980028472307, 0.367269188055796, 0.457332971822279, 0.358390518155149,
                                        0.429046551228366, 0.34891725349109, 0.403096243951033, 0.339467628695119,
                                        0.379050495893449, 0.330026819569658, 0.357076009391786, 0.320159255526952,
                                        0.337582253463976, 0.309377905829183, 0.320998703308691, 0.298360902643027,
                                        0.308103182969802, 0.291318045085329, 0.303127126211299, 0.322785053621512,
                                        0.339227144849455, 0.6, 0.480183939439382, 0.6, 0.568457753185624, 0.6, 0.572906700695333,
                                        0.6, 0.6, 0.579981307277031, 0.531077426771548, 0.485634706951487, 0.442488004459352,
                                        0.401470129626117, 0.363558113529738, 0.330191300579161, 0.302607132882521,
                                        0.282607226751932, 0.272423662929112, 0.243142934668762, 0.212933174686985, 0.6, 0.6, 0.6,
                                        0.6, 0.6, 0.6, 0.59296946454954, 0.530557962860167, 0.468362994761185, 0.406316803954964,
                                        0.344863475873453, 0.285258000313764, 0.228807399693975, 0.2, 0.2, 0.2, 0.6, 0.6, 0.6,
                                        0.6, 0.6, 0.6, 0.6, 0.578271634627412, 0.506296325649081, 0.432447030497741,
                                        0.355802001098073, 0.275845441283722, 0.2, 0.2, 0.2, 0.2, 0.25373691182244,
                                        0.295198452178962, 0.439213157711953, 0.402841765817145, 0.34843038288209,
                                        0.481921349714135, 0.368552039466173, 0.480916495373087, 0.36928729317883,
                                        0.457655358490565, 0.361510039368469, 0.431217012750122, 0.352110296934319,
                                        0.405542440964135, 0.342556601290367, 0.381506103649019, 0.333065439362171,
                                        0.359670409887591, 0.323091010021529, 0.340509567247739, 0.3119265745544,
                                        0.324471515554002, 0.299792929631185, 0.312188971000588, 0.290201820067656,
                                        0.306610396694175, 0.306598276027428, 0.325540957688445, 0.532407316388403,
                                        0.403202630426569, 0.6, 0.454882348857903, 0.6, 0.597569383369634, 0.6, 0.6,
                                        0.578948699272921, 0.532254262601705, 0.487242401799165, 0.44407182217913,
                                        0.403233745157497, 0.365895249370942, 0.333677155528946, 0.30778045434035,
                                        0.288021535834218, 0.269968561435978, 0.227161212219725, 0.2, 0.6, 0.6, 0.6, 0.6, 0.6,
                                        0.6, 0.593784818144895, 0.531192700037323, 0.469027689918029, 0.407365531391816,
                                        0.346884734327936, 0.288795161114087, 0.2335529832211, 0.2, 0.2, 0.2, 0.6, 0.6, 0.6, 0.6,
                                        0.6, 0.6, 0.6, 0.578472968935504, 0.506425631532034, 0.432778395354551, 0.35677082657631,
                                        0.277828443800769, 0.2, 0.2, 0.2, 0.2, 0.6, 0.6, 0.48018393943935, 0.568457753185543,
                                        0.322785053621476, 0.339227144849462, 0.291318045085304, 0.303127126211311,
                                        0.298360902643055, 0.308103182969837, 0.309377905829195, 0.320998703308696,
                                        0.320159255526962, 0.33758225346398, 0.330026819569665, 0.357076009391792,
                                        0.33946762869512, 0.379050495893451, 0.34891725349109, 0.403096243951031,
                                        0.358390518155148, 0.429046551228362, 0.367269188055796, 0.457332971822277,
                                        0.370700527932021, 0.486980028472306, 0.355735396248351, 0.493140982168937,
                                        0.300897285498861, 0.439741811775477, 0.254688172089915, 0.389836261547055,
                                        0.243142934668823, 0.212933174686866, 0.27242366292926, 0.28260722675199,
                                        0.302607132882523, 0.33019130057916, 0.363558113529735, 0.401470129626106,
                                        0.442488004459348, 0.485634706951486, 0.531077426771545, 0.579981307277028, 0.6, 0.6, 0.6,
                                        0.572906700695332, 0.2, 0.2, 0.2, 0.228807399694023, 0.285258000313733, 0.344863475873479,
                                        0.406316803954979, 0.468362994761184, 0.530557962860165, 0.592969464549534, 0.6, 0.6, 0.6,
                                        0.6, 0.6, 0.6, 0.2, 0.2, 0.2, 0.2, 0.275845441283688, 0.355802001098116,
                                        0.432447030497759, 0.506296325649089, 0.578271634627416, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,
                                        0.6, 0.6, 0.532407316388418, 0.403202630426512, 0.45488234885782, 0.306598276027407,
                                        0.325540957688383, 0.290201820067634, 0.306610396694142, 0.299792929631201,
                                        0.312188971000608, 0.311926574554398, 0.324471515554011, 0.323091010021525,
                                        0.340509567247735, 0.333065439362165, 0.359670409887581, 0.342556601290368,
                                        0.381506103649021, 0.352110296934321, 0.405542440964137, 0.361510039368468,
                                        0.431217012750122, 0.369287293178828, 0.457655358490564, 0.368552039466173,
                                        0.480916495373087, 0.348430382882091, 0.481921349714134, 0.295198452178961,
                                        0.439213157711952, 0.253736911822439, 0.402841765817144, 0.227161212219744, 0.2,
                                        0.269968561436021, 0.288021535834224, 0.307780454340339, 0.333677155528973,
                                        0.365895249370972, 0.403233745157497, 0.444071822179129, 0.487242401799164,
                                        0.532254262601704, 0.578948699272918, 0.6, 0.6, 0.6, 0.597569383369634, 0.2, 0.2, 0.2,
                                        0.233552983221121, 0.288795161114067, 0.346884734327978, 0.407365531391859,
                                        0.469027689918045, 0.53119270003732, 0.593784818144888, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.2,
                                        0.2, 0.2, 0.2, 0.27782844380075, 0.356770826576366, 0.432778395354582, 0.506425631532051,
                                        0.578472968935504, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.569025478701126,
                                        0.285650975990293, 0.272754205196513, 0.280168898565867, 0.275715144672984,
                                        0.29098437504322, 0.290978794108848, 0.30353768540895, 0.305517872721067,
                                        0.313453926130374, 0.316298568582213, 0.320615034698067, 0.323771329681574,
                                        0.325767390875702, 0.329083514238575, 0.329609926244423, 0.333099222427096,
                                        0.332324749796173, 0.335874977641735, 0.332160840604672, 0.335035785648186,
                                        0.3250368583567, 0.324726076697545, 0.300511313002791, 0.295004131857117,
                                        0.242409754881262, 0.233321795031642, 0.2, 0.2, 0.409557242421507, 0.301137263572375,
                                        0.356900978460492, 0.307513194911931, 0.2, 0.209965957451343, 0.2, 0.2, 0.2, 0.2,
                                        0.289507571747616, 0.311253360111354, 0.267490918903224, 0.2, 0.2, 0.289081283528577,
                                        0.310054524637649, 0.29333589211964, 0.238204002643556, 0.200161324410216,
                                        0.301218146408398, 0.316221955771634, 0.312868218528288, 0.292289505216098,
                                        0.279797387551674, 0.314454580311121, 0.327907538687575, 0.337126958363172,
                                        0.348894279811827, 0.357737027551783, 0.325996391604746, 0.343411921646291,
                                        0.368217547305366, 0.408411565234612, 0.433109506631156, 0.336076578570502,
                                        0.362246224683042, 0.404989678817988, 0.469691444216141, 0.506554904401164,
                                        0.345617959198287, 0.383946002276382, 0.445650009862624, 0.531826679511293,
                                        0.578674233182571, 0.355274635865946, 0.407973967337059, 0.48884480826588,
                                        0.594599053486391, 0.6, 0.36460286379225, 0.43337660166973, 0.533428501647338, 0.6, 0.6,
                                        0.371294426455825, 0.4579775181699, 0.577914245904847, 0.6, 0.6, 0.366390949205781,
                                        0.474775512661568, 0.6, 0.6, 0.6, 0.340968854858941, 0.470434153536174, 0.6, 0.6, 0.6,
                                        0.289387376138943, 0.438683866427277, 0.6, 0.6, 0.6, 0.252782070415698, 0.415440229573718,
                                        0.6, 0.6, 0.6, 0.252782070415698, 0.415440229573718, 0.289387376138943, 0.438683866427276,
                                        0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.340968854858942, 0.470434153536174, 0.6, 0.6, 0.6,
                                        0.366390949205782, 0.474775512661568, 0.6, 0.6, 0.6, 0.371294426455824, 0.457977518169898,
                                        0.577914245904843, 0.6, 0.6, 0.364602863792249, 0.43337660166973, 0.533428501647335, 0.6,
                                        0.6, 0.355274635865949, 0.407973967337063, 0.488844808265877, 0.594599053486382, 0.6,
                                        0.345617959198288, 0.383946002276383, 0.445650009862626, 0.531826679511291,
                                        0.578674233182568, 0.33607657857048, 0.362246224683012, 0.404989678818002,
                                        0.469691444216177, 0.506554904401191, 0.325996391604731, 0.343411921646266,
                                        0.368217547305399, 0.408411565234663, 0.433109506631192, 0.314454580311115,
                                        0.327907538687568, 0.337126958363189, 0.348894279811865, 0.357737027551836,
                                        0.301218146408364, 0.316221955771621, 0.312868218528282, 0.292289505216119,
                                        0.279797387551689, 0.289081283528524, 0.310054524637589, 0.293335892119644,
                                        0.238204002643577, 0.200161324410161, 0.289507571747606, 0.311253360111283,
                                        0.267490918903237, 0.2, 0.2, 0.356900978460511, 0.307513194911973, 0.209965957451375, 0.2,
                                        0.2, 0.40955724242151, 0.301137263572481, 0.2, 0.2, 0.2, 0.444397822102858,
                                        0.363243534639845, 0.259216327802138, 0.271188229184413, 0.290973213067414,
                                        0.307485303859162, 0.31911784671954, 0.326897141738078, 0.332366543307835,
                                        0.336552333593474, 0.339388058798839, 0.337886262527733, 0.324414997225474,
                                        0.289392130886306, 0.223865042052921, 0.2};

    tOrdinalValue = 880;
    EXPECT_EQ(tOrdinalValue, tControlData.size());

    const size_t tVectorIndex = 0;
    Plato::StandardVector<double> tControl(tControlData);
    EXPECT_EQ(tOrdinalValue, tControl.size());
    aDataMng.setCurrentControl(tVectorIndex, tControl);
    aDataMng.setPreviousControl(tVectorIndex, tControl);

    std::vector<double> tConstGrad = {0.000416666666666667, 0.000416666666666667, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333334, 0.00166666666666666, 0.00166666666666666,
                                      0.000416666666666667, 0.000833333333333332, 0.000833333333333333, 0.00166666666666666,
                                      0.000416666666666667, 0.000833333333333332, 0.000833333333333334, 0.00166666666666666,
                                      0.000208333333333333, 0.000416666666666666, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333332, 0.00166666666666667, 0.00166666666666666,
                                      0.000833333333333331, 0.00166666666666666, 0.000833333333333331, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333331, 0.000833333333333333, 0.000833333333333332,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000833333333333332, 0.00166666666666667, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333332, 0.00166666666666666, 0.00166666666666666,
                                      0.000833333333333333, 0.00166666666666666, 0.000833333333333333, 0.00166666666666667,
                                      0.000416666666666667, 0.000833333333333334, 0.000833333333333333, 0.000833333333333333,
                                      0.00166666666666667, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333332, 0.000833333333333333, 0.00166666666666667, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000416666666666666, 0.000833333333333333, 0.000833333333333333, 0.000833333333333332,
                                      0.00166666666666667, 0.00166666666666666, 0.000833333333333333, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333332, 0.000833333333333332, 0.00166666666666667, 0.00166666666666666,
                                      0.000833333333333331, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000833333333333332, 0.00166666666666666, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333333, 0.00166666666666666, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333333, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333333, 0.000833333333333333,
                                      0.00166666666666667, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333332, 0.000833333333333332, 0.00166666666666666, 0.00166666666666667,
                                      0.000833333333333332, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333333, 0.000833333333333332, 0.000833333333333332,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333332, 0.00166666666666667,
                                      0.000833333333333331, 0.00166666666666666, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.00166666666666666, 0.00166666666666666,
                                      0.000833333333333332, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000416666666666666, 0.000416666666666666,
                                      0.000833333333333332, 0.000833333333333332, 0.000416666666666666, 0.000833333333333332,
                                      0.000416666666666666, 0.000833333333333331, 0.000208333333333333, 0.000416666666666666,
                                      0.000416666666666666, 0.000416666666666666, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333331, 0.000833333333333332, 0.00166666666666666, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.00166666666666666,
                                      0.000208333333333333, 0.000416666666666666, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.00166666666666667, 0.00166666666666666,
                                      0.000833333333333332, 0.00166666666666667, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333333, 0.000833333333333333,
                                      0.00166666666666667, 0.00166666666666666, 0.000833333333333332, 0.00166666666666667,
                                      0.000833333333333332, 0.00166666666666667, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333333, 0.00166666666666666, 0.00166666666666666,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000416666666666667, 0.000833333333333334, 0.000833333333333332, 0.000833333333333332,
                                      0.00166666666666666, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333332, 0.00166666666666667, 0.00166666666666667,
                                      0.000833333333333332, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.00166666666666667, 0.00166666666666666, 0.000833333333333331, 0.00166666666666666,
                                      0.000833333333333332, 0.00166666666666666, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333332, 0.00166666666666667, 0.00166666666666666,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333332, 0.00166666666666667,
                                      0.000416666666666666, 0.000833333333333333, 0.000833333333333333, 0.000833333333333333,
                                      0.00166666666666667, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333332, 0.000833333333333333, 0.00166666666666666, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333333,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000833333333333331, 0.00166666666666666, 0.000416666666666666, 0.000833333333333331,
                                      0.000833333333333332, 0.000833333333333332, 0.00166666666666666, 0.00166666666666666,
                                      0.000833333333333332, 0.00166666666666666, 0.000833333333333333, 0.00166666666666667,
                                      0.000416666666666666, 0.000833333333333333, 0.000833333333333332, 0.000833333333333332,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000833333333333333, 0.00166666666666667, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333333, 0.00166666666666667, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333332, 0.00166666666666666,
                                      0.000416666666666666, 0.000833333333333331, 0.000416666666666666, 0.000416666666666666,
                                      0.000833333333333331, 0.000833333333333332, 0.000416666666666667, 0.000833333333333333,
                                      0.000416666666666666, 0.000833333333333332, 0.000208333333333333, 0.000416666666666666,
                                      0.000833333333333332, 0.000416666666666667, 0.000833333333333332, 0.00166666666666667,
                                      0.000833333333333332, 0.00166666666666666, 0.000833333333333332, 0.00166666666666666,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333332, 0.00166666666666666,
                                      0.000833333333333332, 0.00166666666666666, 0.000833333333333332, 0.00166666666666667,
                                      0.000833333333333333, 0.00166666666666667, 0.000833333333333333, 0.00166666666666667,
                                      0.000833333333333332, 0.00166666666666667, 0.000833333333333332, 0.00166666666666667,
                                      0.000833333333333332, 0.00166666666666666, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333331, 0.00166666666666666, 0.00166666666666666, 0.000833333333333331,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333331, 0.000833333333333333,
                                      0.00166666666666667, 0.00083333333333333, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666666, 0.000833333333333333,
                                      0.00166666666666666, 0.000833333333333331, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666666, 0.000833333333333335,
                                      0.00083333333333333, 0.000416666666666665, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.000833333333333333, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333331, 0.000833333333333332, 0.000416666666666667,
                                      0.000833333333333332, 0.00166666666666666, 0.00166666666666666, 0.000833333333333332,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333332, 0.000833333333333334,
                                      0.00166666666666667, 0.000833333333333332, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.000833333333333333,
                                      0.00166666666666666, 0.000833333333333331, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666666, 0.000833333333333337,
                                      0.000833333333333331, 0.000416666666666666, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.000833333333333332, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333333, 0.000833333333333333, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333331, 0.000833333333333332, 0.000416666666666667,
                                      0.000833333333333332, 0.00166666666666666, 0.00166666666666666, 0.000833333333333333,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333331, 0.000833333333333332,
                                      0.00166666666666667, 0.000833333333333332, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.000833333333333332,
                                      0.00166666666666666, 0.000833333333333332, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.000833333333333332,
                                      0.000833333333333331, 0.000416666666666666, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333331, 0.000833333333333332, 0.000833333333333333, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333332, 0.000833333333333333, 0.000833333333333334,
                                      0.000833333333333333, 0.000833333333333332, 0.000833333333333331, 0.000416666666666666,
                                      0.000833333333333332, 0.00166666666666666, 0.00166666666666666, 0.000833333333333334,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666666, 0.00166666666666667, 0.000833333333333332, 0.000833333333333332,
                                      0.00166666666666666, 0.000833333333333333, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666666, 0.000833333333333332,
                                      0.00166666666666667, 0.000833333333333332, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.000833333333333332,
                                      0.000833333333333332, 0.000416666666666666, 0.000833333333333333, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333332, 0.000833333333333333, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.000833333333333332, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333332, 0.000833333333333332, 0.000416666666666666,
                                      0.000833333333333332, 0.000833333333333331, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666667, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666666, 0.00166666666666666, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.00166666666666667, 0.00166666666666667,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666667, 0.00166666666666667, 0.00166666666666667, 0.00166666666666666,
                                      0.00166666666666666, 0.00166666666666666, 0.000833333333333332, 0.000833333333333332,
                                      0.000416666666666666, 0.000416666666666667, 0.000833333333333332, 0.000833333333333332,
                                      0.000416666666666667, 0.000833333333333332, 0.000416666666666668, 0.000833333333333332,
                                      0.000208333333333333, 0.000416666666666666, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333331, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333333, 0.000833333333333332, 0.000416666666666666,
                                      0.000833333333333333, 0.000833333333333333, 0.000833333333333332, 0.000833333333333332,
                                      0.000416666666666666, 0.000833333333333333, 0.000833333333333333, 0.000833333333333333,
                                      0.000833333333333333, 0.000416666666666666, 0.000833333333333332, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333333, 0.000416666666666667, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333333, 0.000833333333333333, 0.000416666666666667,
                                      0.000833333333333332, 0.000833333333333333, 0.000833333333333332, 0.000833333333333332,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000416666666666666, 0.000833333333333332, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333333, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333334, 0.000833333333333334, 0.000833333333333333, 0.000416666666666667,
                                      0.000833333333333332, 0.000833333333333333, 0.000833333333333333, 0.000833333333333332,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000416666666666666, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.000416666666666666, 0.000416666666666666,
                                      0.000416666666666666, 0.000416666666666666, 0.000416666666666666, 0.000208333333333333,
                                      0.000416666666666666, 0.000416666666666666, 0.000833333333333332, 0.000833333333333333,
                                      0.000416666666666667, 0.000833333333333332, 0.000416666666666666, 0.000833333333333332,
                                      0.000208333333333333, 0.000416666666666666, 0.000833333333333332, 0.000833333333333333,
                                      0.000833333333333332, 0.000833333333333332, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333333, 0.000833333333333332, 0.000416666666666666,
                                      0.000833333333333332, 0.000833333333333333, 0.000833333333333333, 0.000833333333333332,
                                      0.000416666666666666, 0.000833333333333333, 0.000833333333333333, 0.000833333333333333,
                                      0.000833333333333332, 0.000416666666666666, 0.000833333333333333, 0.000833333333333333,
                                      0.000833333333333333, 0.000833333333333332, 0.000416666666666666, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.000833333333333332, 0.000416666666666666,
                                      0.000833333333333332, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000416666666666666, 0.000833333333333333, 0.000833333333333333,
                                      0.000833333333333334, 0.000833333333333333, 0.000416666666666666, 0.000833333333333333,
                                      0.000833333333333334, 0.000833333333333334, 0.000833333333333333, 0.000416666666666666,
                                      0.000833333333333332, 0.000833333333333333, 0.000833333333333332, 0.000833333333333332,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333333, 0.000416666666666666, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333332, 0.000416666666666666, 0.000416666666666666,
                                      0.000416666666666666, 0.000416666666666666, 0.000416666666666666, 0.000208333333333333,
                                      0.000416666666666666, 0.000833333333333332, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333333, 0.000833333333333332, 0.000833333333333332,
                                      0.000833333333333332, 0.000833333333333332, 0.000833333333333333, 0.000833333333333332,
                                      0.000833333333333333, 0.000833333333333332, 0.000833333333333331, 0.000416666666666666};
    Plato::StandardVector<double> tConstraintGradient(tConstGrad);
    aDataMng.setInequalityGradient(tVectorIndex, tConstraintGradient);

    std::vector<double> tObjGrad = {-0.00118825352269219, -0.000942867697620764, -0.00374440229515596, -0.00328944439138641,
                                    -0.00481201014611381, -0.00322907151267403, -0.00973631395672756, -0.00952922172261272,
                                    -0.000597922141315379, -0.00304044158204845, -0.00154170084157075, -0.00702498259817461,
                                    -0.000203204298506084, -0.00133276861535819, -0.000487327439646549, -0.00291806507788684,
                                    -1.27593462558629e-05, -0.000200560415961399, -3.59408777421179e-05, -0.000437879062368695,
                                    -0.00773108482974627, -0.00603396103272856, -0.0170706767993349, -0.012991545209065,
                                    -0.00717239611313768, -0.0156397739427523, -0.00390818824691278, -0.00833336379347255,
                                    -0.00091969026087625, -0.00194686652291114, -0.00962020705301167, -0.00735740165785923,
                                    -0.020332632080632, -0.0153583577444712, -0.010037823417722, -0.0211802603963681,
                                    -0.00671252547082399, -0.0140456475286754, -0.00208333601098072, -0.00434675509934038,
                                    -0.00826923544429442, -0.006053534020901, -0.0170575084562393, -0.0124787500151802,
                                    -0.00960822502946298, -0.0197052388386586, -0.00771687715746371, -0.0157452794504578,
                                    -0.00293283115855823, -0.00597954574766467, -0.00627883329336165, -0.00476700043690746,
                                    -0.0127194128103763, -0.00976062993320892, -0.00742891269813701, -0.0148923617597142,
                                    -0.0069373442599275, -0.0138223806863259, -0.00313537353605519, -0.00623887684998154,
                                    -0.00479225217127733, -0.00401609065433248, -0.00961258196160871, -0.00817665449518601,
                                    -0.00534853917428665, -0.0105829291199286, -0.0056712649434386, -0.0111385676989865,
                                    -0.00295632244981759, -0.005799325212684, -0.00377299239554543, -0.00363211807547843,
                                    -0.00752701645721116, -0.00734497107917256, -0.00383550604401575, -0.00753899424442571,
                                    -0.0045367624201734, -0.00884870472298429, -0.00262134454887329, -0.00511033493100391,
                                    -0.00308639685136343, -0.00345238522264071, -0.00613181754939267, -0.00693282507879648,
                                    -0.00287543816434171, -0.00562966898828739, -0.00375958933792233, -0.00731596912940795,
                                    -0.002323367436954, -0.004524229983864, -0.00260721920651348, -0.00333558357220972,
                                    -0.00516313391199782, -0.00665916956124581, -0.00235259129769326, -0.00460016945073242,
                                    -0.00346665529577792, -0.00676198728896248, -0.00223921862989646, -0.00437509388056062,
                                    -0.00221382179622192, -0.00313281178355237, -0.00438100093001415, -0.00623709439277786,
                                    -0.0021322824084593, -0.00418669478616198, -0.00361535137304436, -0.00711163368736985,
                                    -0.0023993441243968, -0.00472861284719482, -0.00184638219764635, -0.00273824073249058,
                                    -0.00367517573987638, -0.00546681417925507, -0.00209446129427525, -0.00416284006221822,
                                    -0.00404365254925832, -0.00805931361291475, -0.0027239601117658, -0.00543574643940112,
                                    -0.00153445889881108, -0.0021412306694059, -0.00310901437976744, -0.0043129327265862,
                                    -0.00218504965207623, -0.00448340881759633, -0.00461169889139481, -0.00946267858863384,
                                    -0.00313129734579926, -0.00641842939528832, -0.00125930563813668, -0.00145013915448526,
                                    -0.00259014942061991, -0.00295640433733247, -0.00246314116196505, -0.00514725813350932,
                                    -0.00573729307364934, -0.0119459959931871, -0.00392736992689772, -0.0081569579426731,
                                    -0.000863785550767544, -0.000852253057475998, -0.00178323747162563, -0.00178040084816739,
                                    -0.00230143562409604, -0.00459247014255531, -0.00713538228659159, -0.0141215550672347,
                                    -0.00530619139270469, -0.0104949869962352, -0.000304563433303944, -0.000300597426943074,
                                    -0.000631081094087537, -0.000646655754272895, -0.00096841311588274, -0.00181502139950538,
                                    -0.00385454970966195, -0.0073142692661789, -0.00305064252835843, -0.00582629757021007,
                                    -0.00030059742694308, -0.000304563433303923, -0.00086378555076748, -0.000852253057476016,
                                    -0.000646655754272899, -0.000631081094087504, -0.00178323747162553, -0.00178040084816741,
                                    -0.000968413115882655, -0.00230143562409584, -0.00181502139950527, -0.00459247014255504,
                                    -0.00385454970966175, -0.00713538228659123, -0.00731426926617865, -0.0141215550672342,
                                    -0.00305064252835829, -0.00530619139270447, -0.0058262975702099, -0.0104949869962349,
                                    -0.00125930563813658, -0.00145013915448531, -0.00259014942061975, -0.00295640433733255,
                                    -0.00246314116196486, -0.00514725813350903, -0.00573729307364908, -0.0119459959931868,
                                    -0.00392736992689758, -0.00815695794267296, -0.00153445889881096, -0.00214123066940601,
                                    -0.00310901437976723, -0.00431293272658635, -0.00218504965207608, -0.00448340881759606,
                                    -0.00461169889139465, -0.00946267858863367, -0.00313129734579919, -0.00641842939528829,
                                    -0.0018463821976462, -0.00273824073249076, -0.00367517573987609, -0.00546681417925532,
                                    -0.0020944612942751, -0.00416284006221794, -0.00404365254925824, -0.00805931361291469,
                                    -0.00272396011176578, -0.00543574643940118, -0.00221382179622172, -0.00313281178355262,
                                    -0.00438100093001379, -0.00623709439277822, -0.00213228240845918, -0.00418669478616175,
                                    -0.00361535137304435, -0.0071116336873699, -0.0023993441243968, -0.0047286128471949,
                                    -0.00260721920651329, -0.00333558357221003, -0.00516313391199747, -0.00665916956124629,
                                    -0.00235259129769314, -0.00460016945073218, -0.00346665529577788, -0.00676198728896239,
                                    -0.00223921862989647, -0.00437509388056063, -0.00308639685136319, -0.00345238522264111,
                                    -0.00613181754939218, -0.0069328250787971, -0.00287543816434151, -0.00562966898828705,
                                    -0.00375958933792232, -0.00731596912940789, -0.00232336743695408, -0.00452422998386409,
                                    -0.00377299239554502, -0.00363211807547903, -0.00752701645721051, -0.00734497107917351,
                                    -0.00383550604401544, -0.00753899424442517, -0.00453676242017335, -0.00884870472298407,
                                    -0.00262134454887333, -0.00511033493100388, -0.00479225217127663, -0.00401609065433317,
                                    -0.00961258196160748, -0.00817665449518708, -0.00534853917428606, -0.0105829291199273,
                                    -0.00567126494343835, -0.0111385676989857, -0.00295632244981748, -0.00579932521268368,
                                    -0.0062788332933603, -0.00476700043690811, -0.0127194128103739, -0.00976062993321009,
                                    -0.00742891269813571, -0.0148923617597118, -0.00693734425992692, -0.0138223806863249,
                                    -0.00313537353605499, -0.00623887684998132, -0.00826923544429283, -0.00605353402090166,
                                    -0.0170575084562368, -0.0124787500151817, -0.00960822502946125, -0.0197052388386563,
                                    -0.00771687715746261, -0.0157452794504568, -0.00293283115855784, -0.00597954574766439,
                                    -0.00962020705301105, -0.00735740165786064, -0.0203326320806316, -0.015358357744474,
                                    -0.0100378234177209, -0.0211802603963672, -0.0067125254708229, -0.0140456475286742,
                                    -0.00208333601098039, -0.00434675509933978, -0.00773108482974626, -0.00603396103273104,
                                    -0.0170706767993354, -0.0129915452090687, -0.00717239611313713, -0.0156397739427524,
                                    -0.00390818824691199, -0.00833336379347129, -0.000919690260876066, -0.00194686652291049,
                                    -0.00374440229515582, -0.00328944439139081, -0.00973631395672689, -0.0095292217226193,
                                    -0.00304044158204815, -0.00702498259817454, -0.00133276861535771, -0.00291806507788615,
                                    -0.000200560415961225, -0.000437879062368209, -0.000942867697620723, -0.0011882535226952,
                                    -0.00322907151267344, -0.00481201014611864, -0.000597922141315365, -0.00154170084157056,
                                    -0.000203204298506, -0.000487327439646421, -1.27593462558059e-05, -3.59408777419446e-05,
                                    -0.00534649836654742, -0.00130572417008242, -0.00290654162304923, -0.00867539243064341,
                                    -0.00497354554581064, -0.010348284630494, -0.00629164655759529, -0.0130141684041324,
                                    -0.00521695231914117, -0.0107214875153002, -0.00423021902440143, -0.0087001515295953,
                                    -0.00371487299632464, -0.00761552375369958, -0.00355843312679333, -0.00723716914975013,
                                    -0.00361041872736256, -0.00727789384903833, -0.00370704614800888, -0.00741864016013129,
                                    -0.00367054302858984, -0.00731956016905132, -0.00333327040091551, -0.00666185456257327,
                                    -0.00262285247134412, -0.00528618120390124, -0.00168810169499841, -0.00344894795041605,
                                    -0.000921425384826301, -0.0019261462706181, -0.000321080911665852, -0.000685259379538095,
                                    -0.000692116656382446, -0.0018562956098043, -0.00183890382488427, -0.000653035451057467,
                                    -0.00301253039372775, -0.00266168757618507, -0.00434340412807618, -0.0031491109675914,
                                    -0.00545714688050632, -0.0036575870842337, -0.00620856520141468, -0.0043343582626115,
                                    -0.00664717197004075, -0.00511182940644128, -0.0069608797112298, -0.00609084138989381,
                                    -0.0074257060326489, -0.00750804811509176, -0.00832112778890436, -0.00964065958227143,
                                    -0.00998725924048031, -0.012881159100561, -0.0128504323348399, -0.0175765464503361,
                                    -0.0160019124531357, -0.0214248503771657, -0.013915171780619, -0.0186791865226413,
                                    -0.0124795652761845, -0.0119838290202473, -0.0072475219751315, -0.00457241071365744,
                                    -0.00458206959297747, -0.00169322073663988, -0.0053682338562904, -0.00459671832122889,
                                    -0.00413675753113122, -0.00410882475288443, -0.00449515630355026, -0.00550846164495537,
                                    -0.00740697639436702, -0.0104687798728267, -0.0149268980660875, -0.0201940275632851,
                                    -0.0222848738842142, -0.0169347559956604, -0.00796908401304836, -0.00188755653631331,
                                    -0.0139723425799105, -0.0069194318095371, -0.0124174056943469, -0.00970195939126392,
                                    -0.00803132212588407, -0.00699256462484146, -0.00659066397358239, -0.00711275958188185,
                                    -0.00862388460377968, -0.0109346055049512, -0.0137700728379284, -0.0160568045946949,
                                    -0.0146662442318383, -0.00885035111209492, -0.00317059341247116, -0.000568246898286423,
                                    -0.0103775910064198, -0.00555130808945222, -0.00845917603155071, -0.00657426409845274,
                                    -0.00542357265514945, -0.00465853744500733, -0.00427175049788138, -0.00440172509359709,
                                    -0.00497798076404811, -0.00568600552484076, -0.00620700662528998, -0.00609342917930097,
                                    -0.00452683817130735, -0.00205435252219015, -0.000474637270614136, -4.63632855889244e-05,
                                    -0.000646655754272903, -0.00178040084816741, -0.00178323747162556, -0.000631081094087517,
                                    -0.00295640433733251, -0.0025901494206198, -0.00431293272658627, -0.0031090143797673,
                                    -0.00546681417925515, -0.00367517573987621, -0.00623709439277797, -0.00438100093001399,
                                    -0.00665916956124596, -0.00516313391199771, -0.00693282507879655, -0.00613181754939247,
                                    -0.00734497107917262, -0.00752701645721088, -0.0081766544951861, -0.00961258196160847,
                                    -0.00976062993320958, -0.0127194128103765, -0.0124787500151813, -0.0170575084562399,
                                    -0.0153583577444715, -0.0203326320806318, -0.0129915452090643, -0.0170706767993335,
                                    -0.00952922172261516, -0.00973631395672592, -0.00481201014611687, -0.00322907151267325,
                                    -0.00459247014255509, -0.00181502139950528, -0.0051472581335091, -0.00448340881759612,
                                    -0.00416284006221803, -0.00418669478616187, -0.00460016945073247, -0.00562966898828753,
                                    -0.00753899424442585, -0.0105829291199289, -0.0148923617597149, -0.019705238838659,
                                    -0.0211802603963677, -0.015639773942752, -0.00702498259817436, -0.00154170084157051,
                                    -0.0141215550672342, -0.00731426926617866, -0.0119459959931868, -0.00946267858863362,
                                    -0.00805931361291463, -0.0071116336873698, -0.00676198728896248, -0.00731596912940812,
                                    -0.00884870472298471, -0.0111385676989871, -0.0138223806863267, -0.0157452794504575,
                                    -0.0140456475286743, -0.0083333637934719, -0.00291806507788655, -0.000487327439646504,
                                    -0.0104949869962349, -0.00582629757020991, -0.00815695794267289, -0.00641842939528821,
                                    -0.00543574643940109, -0.00472861284719479, -0.00437509388056056, -0.00452422998386404,
                                    -0.00511033493100418, -0.00579932521268438, -0.00623887684998185, -0.0059795457476645,
                                    -0.00434675509933989, -0.00194686652291083, -0.000437879062368591, -3.59408777421267e-05,
                                    -0.007247521975135, -0.0124795652761899, -0.011983829020249, -0.00457241071365815,
                                    -0.0139151717806223, -0.0186791865226426, -0.0160019124531378, -0.0214248503771655,
                                    -0.0128504323348413, -0.0175765464503345, -0.00998725924048096, -0.0128811591005592,
                                    -0.00832112778890486, -0.00964065958227046, -0.00742570603264947, -0.0075080481150913,
                                    -0.00696087971123014, -0.00609084138989343, -0.00664717197004096, -0.00511182940644104,
                                    -0.00620856520141483, -0.00433435826261132, -0.00545714688050639, -0.00365758708423355,
                                    -0.00434340412807619, -0.00314911096759129, -0.00301253039372775, -0.00266168757618499,
                                    -0.00185629560980429, -0.00183890382488423, -0.000692116656382436, -0.000653035451057449,
                                    -0.00796908401304914, -0.00188755653631334, -0.016934755995661, -0.0222848738842137,
                                    -0.0201940275632837, -0.0149268980660855, -0.0104687798728255, -0.00740697639436653,
                                    -0.00550846164495515, -0.00449515630355019, -0.00410882475288443, -0.00413675753113117,
                                    -0.00459671832122883, -0.00536823385629032, -0.0045820695929774, -0.00169322073663987,
                                    -0.00317059341247134, -0.000568246898286557, -0.00885035111209454, -0.0146662442318382,
                                    -0.016056804594695, -0.0137700728379275, -0.0109346055049501, -0.00862388460377943,
                                    -0.00711275958188198, -0.00659066397358254, -0.00699256462484176, -0.00803132212588428,
                                    -0.00970195939126405, -0.012417405694347, -0.0139723425799104, -0.00691943180953709,
                                    -0.000474637270614038, -4.63632855888832e-05, -0.00205435252218985, -0.00452683817130724,
                                    -0.00609342917930131, -0.00620700662528993, -0.00568600552484027, -0.00497798076404805,
                                    -0.00440172509359729, -0.00427175049788152, -0.00465853744500756, -0.00542357265514964,
                                    -0.00657426409845288, -0.0084591760315508, -0.0103775910064198, -0.00555130808945222,
                                    -0.00481201014611633, -0.009529221722616, -0.0097363139567287, -0.00322907151267522,
                                    -0.012991545209066, -0.0170706767993341, -0.0153583577444721, -0.0203326320806312,
                                    -0.0124787500151814, -0.0170575084562388, -0.00976062993320948, -0.0127194128103753,
                                    -0.00817665449518611, -0.00961258196160769, -0.00734497107917278, -0.00752701645721053,
                                    -0.00693282507879665, -0.00613181754939226, -0.00665916956124594, -0.00516313391199757,
                                    -0.00623709439277789, -0.00438100093001392, -0.00546681417925503, -0.00367517573987617,
                                    -0.00431293272658616, -0.00310901437976728, -0.00295640433733246, -0.00259014942061981,
                                    -0.00178040084816737, -0.00178323747162557, -0.000646655754272881, -0.000631081094087513,
                                    -0.00702498259817501, -0.00154170084157098, -0.0156397739427515, -0.0211802603963668,
                                    -0.019705238838658, -0.0148923617597133, -0.0105829291199278, -0.00753899424442551,
                                    -0.00562966898828747, -0.00460016945073252, -0.00418669478616201, -0.00416284006221818,
                                    -0.00448340881759626, -0.00514725813350924, -0.00459247014255524, -0.00181502139950535,
                                    -0.00291806507788679, -0.000487327439646606, -0.00833336379347186, -0.0140456475286749,
                                    -0.015745279450458, -0.0138223806863259, -0.0111385676989862, -0.00884870472298461,
                                    -0.00731596912940854, -0.00676198728896294, -0.00711163368737032, -0.00805931361291509,
                                    -0.00946267858863407, -0.0119459959931872, -0.0141215550672347, -0.00731426926617887,
                                    -0.000437879062368784, -3.5940877742221e-05, -0.00194686652291099, -0.00434675509934036,
                                    -0.00597954574766505, -0.00623887684998171, -0.00579932521268385, -0.00511033493100412,
                                    -0.00452422998386439, -0.00437509388056092, -0.00472861284719519, -0.00543574643940142,
                                    -0.00641842939528853, -0.00815695794267321, -0.0104949869962352, -0.00582629757021006,
                                    -0.0053464983665475, -0.00808155585649155, -0.0115377152789077, -0.0086753924306427,
                                    -0.0107494803202065, -0.0103482846304924, -0.0134450434122682, -0.0130141684041311,
                                    -0.0110090703335047, -0.0107214875152998, -0.00893986528187236, -0.00870015152959499,
                                    -0.00780130169493152, -0.00761552375369902, -0.00735747210507305, -0.00723716914974976,
                                    -0.00733495025149515, -0.00727789384903817, -0.00742318801623981, -0.00741864016013118,
                                    -0.00729803425442603, -0.00731956016905119, -0.00665716829927453, -0.00666185456257315,
                                    -0.00532665746411672, -0.00528618120390118, -0.00352169251849954, -0.00344894795041602,
                                    -0.00200944187710882, -0.00192614627061808, -0.000728356952840824, -0.00068525937953809,
                                    -0.00118825352269484, -0.000942867697620427, -0.00328944439138924, -0.00374440229515521,
                                    -0.00059792214131508, -0.00304044158204796, -0.000203204298506071, -0.001332768615358,
                                    -1.27593462558641e-05, -0.000200560415961397, -0.00603396103272885, -0.00773108482974553,
                                    -0.0071723961131372, -0.00390818824691234, -0.000919690260876163, -0.00735740165785973,
                                    -0.00962020705301151, -0.0100378234177215, -0.00671252547082316, -0.00208333601098039,
                                    -0.00605353402090178, -0.00826923544429478, -0.00960822502946296, -0.00771687715746326,
                                    -0.00293283115855803, -0.00476700043690793, -0.0062788332933618, -0.00742891269813744,
                                    -0.00693734425992791, -0.00313537353605533, -0.00401609065433266, -0.00479225217127723,
                                    -0.00534853917428704, -0.00567126494343915, -0.00295632244981784, -0.00363211807547855,
                                    -0.00377299239554527, -0.0038355060440159, -0.00453676242017375, -0.00262134454887352,
                                    -0.00345238522264078, -0.0030863968513633, -0.0028754381643418, -0.00375958933792244,
                                    -0.00232336743695404, -0.00333558357220983, -0.00260721920651341, -0.0023525912976933,
                                    -0.00346665529577791, -0.00223921862989642, -0.00313281178355246, -0.00221382179622183,
                                    -0.00213228240845924, -0.00361535137304429, -0.00239934412439675, -0.00273824073249065,
                                    -0.00184638219764625, -0.00209446129427515, -0.0040436525492582, -0.00272396011176572,
                                    -0.00214123066940596, -0.00153445889881099, -0.00218504965207611, -0.00461169889139463,
                                    -0.00313129734579916, -0.00145013915448529, -0.0012593056381366, -0.00246314116196489,
                                    -0.00573729307364906, -0.00392736992689755, -0.000852253057476012, -0.000863785550767493,
                                    -0.00230143562409586, -0.00713538228659122, -0.00530619139270446, -0.000300597426943081,
                                    -0.000304563433303928, -0.000968413115882659, -0.00385454970966176, -0.0030506425283583,
                                    -0.000300597426943067, -0.000304563433303931, -0.000852253057475985, -0.000863785550767509,
                                    -0.000968413115882727, -0.002301435624096, -0.00385454970966194, -0.00713538228659159,
                                    -0.00305064252835842, -0.0053061913927047, -0.00145013915448524, -0.00125930563813662,
                                    -0.00246314116196501, -0.00573729307364939, -0.00392736992689778, -0.00214123066940587,
                                    -0.001534458898811, -0.00218504965207621, -0.00461169889139494, -0.00313129734579938,
                                    -0.00273824073249054, -0.00184638219764623, -0.00209446129427522, -0.00404365254925849,
                                    -0.00272396011176595, -0.00313281178355236, -0.00221382179622177, -0.00213228240845927,
                                    -0.00361535137304458, -0.002399344124397, -0.00333558357220975, -0.00260721920651334,
                                    -0.0023525912976933, -0.00346665529577818, -0.00223921862989664, -0.00345238522264075,
                                    -0.00308639685136323, -0.00287543816434181, -0.00375958933792268, -0.00232336743695419,
                                    -0.00363211807547852, -0.00377299239554515, -0.00383550604401582, -0.00453676242017373,
                                    -0.00262134454887345, -0.00401609065433257, -0.0047922521712769, -0.0053485391742865,
                                    -0.00567126494343865, -0.00295632244981758, -0.00476700043690769, -0.00627883329336127,
                                    -0.00742891269813674, -0.00693734425992755, -0.00313537353605524, -0.00605353402090141,
                                    -0.00826923544429431, -0.0096082250294627, -0.00771687715746374, -0.00293283115855833,
                                    -0.00735740165785947, -0.00962020705301131, -0.0100378234177214, -0.00671252547082361,
                                    -0.0020833360109807, -0.00603396103272855, -0.00773108482974543, -0.00717239611313691,
                                    -0.00390818824691223, -0.00091969026087617, -0.0032894443913868, -0.00374440229515583,
                                    -0.00304044158204805, -0.00133276861535784, -0.000200560415961377, -0.00118825352269265,
                                    -0.000942867697621133, -0.000597922141315337, -0.000203204298505996, -1.27593462558832e-05,
                                    -0.00130572417008221, -0.00290654162304843, -0.00497354554580951, -0.00629164655759463,
                                    -0.00521695231914091, -0.00423021902440117, -0.00371487299632438, -0.00355843312679312,
                                    -0.00361041872736243, -0.00370704614800877, -0.00367054302858973, -0.00333327040091543,
                                    -0.00262285247134407, -0.00168810169499839, -0.000921425384826293, -0.000321080911665849};
    Plato::StandardVector<double> tObjectiveGradient(tObjGrad);
    aDataMng.setObjectiveGradient(tVectorIndex, tObjectiveGradient);
}

TEST(PlatoTest, OptimalityCriteriaObjectiveTest)
{
    Plato::StandardVectorReductionOperations<double> tInterface;
    Plato::OptimalityCriteriaTestObjectiveOne<double> tObjective(tInterface);

    size_t tNumVectors = 1;
    size_t tNumElements = 5;
    std::vector<double> tData(tNumElements, 0.);
    Plato::StandardMultiVector<double> tControl(tNumVectors, tData);

    // ********* Set Control Data For Test *********
    const size_t tVectorIndex = 0;
    tData = { 6.0368603545003321, 5.2274861883466066, 4.5275369637457814, 3.5304415556495417, 2.1550569529294781 };
    for(size_t tIndex = 0; tIndex < tData.size(); tIndex++)
    {
        tControl(tVectorIndex, tIndex) = tData[tIndex];
    }

    // ********* Test Objective Value *********
    double tObjectiveValue = tObjective.value(tControl);

    double tTolerance = 1e-6;
    double tGoldValue = 1.3401885069;
    EXPECT_NEAR(tObjectiveValue, tGoldValue, tTolerance);

    // ********* Test Objective Gradient *********
    Plato::StandardMultiVector<double> tGradient(tNumVectors, tData);
    tObjective.gradient(tControl, tGradient);

    std::vector<double> tGoldGradient(tNumElements, 0.);
    std::fill(tGoldGradient.begin(), tGoldGradient.end(), 0.0624);
    for(size_t tIndex = 0; tIndex < tData.size(); tIndex++)
    {
        EXPECT_NEAR(tGradient(tVectorIndex, tIndex), tGoldGradient[tIndex], tTolerance);
    }
}

TEST(PlatoTest, OptimalityCriteriaInequalityTestOne)
{
    Plato::OptimalityCriteriaTestInequalityOne<double> tConstraint;

    size_t tNumVectors = 1;
    size_t tNumElements = 5;
    std::vector<double> tData(tNumElements, 0.);
    Plato::StandardMultiVector<double> tControl(tNumVectors, tData);

    // ********* Set Control Data For Test *********
    const size_t tVectorIndex = 0;
    tData = { 6.0368603545003321, 5.2274861883466066, 4.5275369637457814, 3.5304415556495417, 2.1550569529294781 };
    for(size_t tIndex = 0; tIndex < tData.size(); tIndex++)
    {
        tControl(tVectorIndex, tIndex) = tData[tIndex];
    }

    double tInequalityValue = tConstraint.value(tControl);

    double tTolerance = 1e-6;
    double tGoldValue = -5.07057774290498e-6;
    EXPECT_NEAR(tInequalityValue, tGoldValue, tTolerance);

    // ********* Test Inequality Gradient *********
    Plato::StandardMultiVector<double> tGradient(tNumVectors, tData);
    tConstraint.gradient(tControl, tGradient);

    std::vector<double> tGoldGradient =
            { -0.13778646890793422, -0.14864537557631985, -0.13565219858574704, -0.1351771199123859, -0.13908690613190111 };
    for(size_t tIndex = 0; tIndex < tData.size(); tIndex++)
    {
        EXPECT_NEAR(tGradient(tVectorIndex, tIndex), tGoldGradient[tIndex], tTolerance);
    }
}

TEST(PlatoTest, OptimalityCriteriaDataMng)
{
    // ********* Allocate Core Optimization Data Templates *********
    std::shared_ptr<Plato::DataFactory<double>> tFactory = std::make_shared<Plato::DataFactory<double>>();
    const size_t tNumDual = 1;
    const size_t tNumVectors = 1;
    tFactory->allocateDual(tNumDual, tNumVectors);
    const size_t tNumStates = 10;
    tFactory->allocateState(tNumStates, tNumVectors);
    const size_t tNumControls = 5;
    tFactory->allocateControl(tNumControls, tNumVectors);

    Plato::OptimalityCriteriaDataMng<double> tDataMng(tFactory);
    double tValue = 23;
    tDataMng.setCurrentObjectiveValue(tValue);

    double tGold = tDataMng.getCurrentObjectiveValue();
    double tTolerance = 1e-6;
    EXPECT_NEAR(tValue, tGold, tTolerance);

    tValue = 24;
    tDataMng.setPreviousObjectiveValue(tValue);
    tGold = tDataMng.getPreviousObjectiveValue();
    EXPECT_NEAR(tValue, tGold, tTolerance);

    // ********* Test Dual Functions *********
    tValue = 0.23;
    size_t tIndex = 0;
    tDataMng.setCurrentDual(tIndex, tValue);
    tGold = 0.23;
    EXPECT_NEAR(tDataMng.getCurrentDual()[tIndex], tGold, tTolerance);

    tValue = 0.345;
    tDataMng.setCurrentConstraintValue(tIndex, tValue);
    tGold = 0.345;
    EXPECT_NEAR(tDataMng.getCurrentConstraintValues()[tIndex], tGold, tTolerance);

    // ********* Test Initial Guess Functions *********
    tValue = 0.18;
    Plato::StandardMultiVector<double> tInitialGuess(tNumVectors, tNumControls, tValue);
    tDataMng.setInitialGuess(tInitialGuess);
    PlatoTest::checkMultiVectorData(tDataMng.getCurrentControl(), tInitialGuess, tTolerance);

    tValue = 0.44;
    size_t tVectorIndex = 0;
    tInitialGuess[tVectorIndex].fill(tValue);
    tDataMng.setInitialGuess(tVectorIndex, tInitialGuess[tVectorIndex]);
    PlatoTest::checkVectorData(tDataMng.getCurrentControl(tVectorIndex), tInitialGuess.operator [](tVectorIndex));

    tValue = 0.07081982;
    tInitialGuess[tVectorIndex].fill(tValue);
    tDataMng.setInitialGuess(tVectorIndex, tValue);
    PlatoTest::checkVectorData(tDataMng.getCurrentControl(tVectorIndex), tInitialGuess.operator [](tVectorIndex));

    tValue = 0.10111983;
    tInitialGuess[tVectorIndex].fill(tValue);
    tDataMng.setInitialGuess(tValue);
    PlatoTest::checkVectorData(tDataMng.getCurrentControl(tVectorIndex), tInitialGuess.operator [](tVectorIndex));

    // ********* Test Control Functions *********
    tValue = 0.08;
    Plato::StandardMultiVector<double> tCurrentControl(tNumVectors, tNumControls, tValue);
    tDataMng.setCurrentControl(tCurrentControl);
    PlatoTest::checkMultiVectorData(tDataMng.getCurrentControl(), tCurrentControl, tTolerance);

    tValue = 0.11;
    tCurrentControl[tVectorIndex].fill(tValue);
    tDataMng.setCurrentControl(tVectorIndex, tCurrentControl[tVectorIndex]);
    PlatoTest::checkVectorData(tDataMng.getCurrentControl(tVectorIndex), tCurrentControl.operator [](tVectorIndex));

    tValue = 0.09;
    Plato::StandardMultiVector<double> tPreviousControl(tNumVectors, tNumControls, tValue);
    tDataMng.setPreviousControl(tPreviousControl);
    PlatoTest::checkMultiVectorData(tDataMng.getPreviousControl(), tPreviousControl, tTolerance);

    tValue = 0.21;
    tPreviousControl[tVectorIndex].fill(tValue);
    tDataMng.setPreviousControl(tVectorIndex, tPreviousControl[tVectorIndex]);
    PlatoTest::checkVectorData(tDataMng.getPreviousControl(tVectorIndex), tPreviousControl.operator [](tVectorIndex));

    // ********* Test Objective Gradient Functions *********
    tValue = 0.88;
    Plato::StandardMultiVector<double> tObjectiveGradient(tNumVectors, tNumControls, tValue);
    tDataMng.setObjectiveGradient(tObjectiveGradient);
    PlatoTest::checkMultiVectorData(tDataMng.getObjectiveGradient(), tObjectiveGradient, tTolerance);

    tValue = 0.91;
    tObjectiveGradient[tVectorIndex].fill(tValue);
    tDataMng.setObjectiveGradient(tVectorIndex, tObjectiveGradient[tVectorIndex]);
    PlatoTest::checkVectorData(tDataMng.getObjectiveGradient(tVectorIndex), tObjectiveGradient.operator [](tVectorIndex));

    // ********* Test Inequality Gradient Functions *********
    tValue = 0.68;
    Plato::StandardMultiVector<double> tInequalityGradient(tNumVectors, tNumControls, tValue);
    tDataMng.setInequalityGradient(tInequalityGradient);
    PlatoTest::checkMultiVectorData(tDataMng.getInequalityGradient(), tInequalityGradient, tTolerance);

    tValue = 0.61;
    tInequalityGradient[tVectorIndex].fill(tValue);
    tDataMng.setInequalityGradient(tVectorIndex, tInequalityGradient[tVectorIndex]);
    PlatoTest::checkVectorData(tDataMng.getInequalityGradient(tVectorIndex), tInequalityGradient.operator [](tVectorIndex));

    // ********* Test Control Lower Bounds Functions *********
    tValue = 1e-3;
    Plato::StandardMultiVector<double> tLowerBounds(tNumVectors, tNumControls, tValue);
    tDataMng.setControlLowerBounds(tLowerBounds);
    PlatoTest::checkMultiVectorData(tDataMng.getControlLowerBounds(), tLowerBounds, tTolerance);

    tValue = 1e-2;
    tLowerBounds[tVectorIndex].fill(tValue);
    tDataMng.setControlLowerBounds(tVectorIndex, tLowerBounds[tVectorIndex]);
    PlatoTest::checkVectorData(tDataMng.getControlLowerBounds(tVectorIndex), tLowerBounds.operator [](tVectorIndex));

    tValue = -1;
    tDataMng.setControlLowerBounds(tVectorIndex, tValue);
    tLowerBounds[tVectorIndex].fill(tValue);
    PlatoTest::checkVectorData(tDataMng.getControlLowerBounds(tVectorIndex), tLowerBounds.operator [](tVectorIndex));

    tValue = 0.5;
    tDataMng.setControlLowerBounds(tVectorIndex, tValue);
    tLowerBounds[tVectorIndex].fill(tValue);
    PlatoTest::checkVectorData(tDataMng.getControlLowerBounds(tVectorIndex), tLowerBounds.operator [](tVectorIndex));

    // ********* Test Control Upper Bounds Functions *********
    tValue = 1;
    Plato::StandardMultiVector<double> tUpperBounds(tNumVectors, tNumControls, tValue);
    tDataMng.setControlUpperBounds(tUpperBounds);
    PlatoTest::checkMultiVectorData(tDataMng.getControlUpperBounds(), tUpperBounds, tTolerance);

    tValue = 0.99;
    tUpperBounds[tVectorIndex].fill(tValue);
    tDataMng.setControlUpperBounds(tVectorIndex, tUpperBounds[tVectorIndex]);
    PlatoTest::checkVectorData(tDataMng.getControlUpperBounds(tVectorIndex), tUpperBounds.operator [](tVectorIndex));

    tValue = 10;
    tDataMng.setControlUpperBounds(tVectorIndex, tValue);
    tUpperBounds[tVectorIndex].fill(tValue);
    PlatoTest::checkVectorData(tDataMng.getControlUpperBounds(tVectorIndex), tUpperBounds.operator [](tVectorIndex));

    tValue = 8;
    tDataMng.setControlUpperBounds(tVectorIndex, tValue);
    tUpperBounds[tVectorIndex].fill(tValue);
    PlatoTest::checkVectorData(tDataMng.getControlUpperBounds(tVectorIndex), tUpperBounds.operator [](tVectorIndex));

    // ********* Test Compute Stagnation Measure Functions *********
    tCurrentControl[tVectorIndex].fill(1.5);
    tDataMng.setCurrentControl(tCurrentControl);
    tPreviousControl[tVectorIndex].fill(4.0);
    tDataMng.setPreviousControl(tPreviousControl);
    tDataMng.computeControlStagnationMeasure();

    tGold = 2.5;
    tValue = tDataMng.getControlStagnationMeasure();
    EXPECT_NEAR(tValue, tGold, tTolerance);

    // ********* Test Compute Max Inequality Value Functions *********
    tDataMng.computeMaxInequalityValue();
    tGold = 0.345;
    tValue = tDataMng.getMaxInequalityValue();
    EXPECT_NEAR(tValue, tGold, tTolerance);

    // ********* Test Compute Max Inequality Value Functions *********
    tDataMng.computeNormObjectiveGradient();
    tGold = 2.0348218595248;
    tValue = tDataMng.getNormObjectiveGradient();
    EXPECT_NEAR(tValue, tGold, tTolerance);
}

TEST(PlatoTest, OptimalityCriteriaStageMngSimpleTest)
{
    // ********* Allocate Core Optimization Data Templates *********
    std::shared_ptr<Plato::DataFactory<double>> tFactory = std::make_shared<Plato::DataFactory<double>>();
    const size_t tNumVectors = 1;
    const size_t tNumDual = 1;
    tFactory->allocateDual(tNumDual, tNumVectors);
    const size_t tNumStates = 1;
    tFactory->allocateState(tNumStates, tNumVectors);
    const size_t tNumControls = 5;
    tFactory->allocateControl(tNumControls, tNumVectors);

    // ********* Allocate Stage Manager *********
    std::shared_ptr<Plato::CriterionList<double>> tConstraintList = std::make_shared<Plato::CriterionList<double>>();
    std::shared_ptr<Plato::OptimalityCriteriaTestInequalityOne<double>> tMyConstraint =
            std::make_shared<Plato::OptimalityCriteriaTestInequalityOne<double>>();
    tConstraintList->add(tMyConstraint);
    Plato::StandardVectorReductionOperations<double> tReductionOperations;
    std::shared_ptr<Plato::OptimalityCriteriaTestObjectiveOne<double>> tObjective =
            std::make_shared<Plato::OptimalityCriteriaTestObjectiveOne<double>>(tReductionOperations);
    Plato::OptimalityCriteriaStageMng<double> tStageMng(tFactory, tObjective, tConstraintList);

    // ********* Allocate Optimality Criteria Data Manager *********
    Plato::OptimalityCriteriaDataMng<double> tDataMng(tFactory);

    // ********* Test Update Function *********
    std::vector<double> tData =
        { 6.0368603545003321, 5.2274861883466066, 4.5275369637457814, 3.5304415556495417, 2.1550569529294781 };
    Plato::StandardVector<double> tControl(tData);

    size_t tVectorIndex = 0;
    tDataMng.setCurrentControl(tVectorIndex, tControl);
    tStageMng.update(tDataMng);

    double tTolerance = 1e-6;
    double tGoldValue = 1.3401885069;
    double tObjectiveValue = tDataMng.getCurrentObjectiveValue();
    EXPECT_NEAR(tObjectiveValue, tGoldValue, tTolerance);

    std::fill(tData.begin(), tData.end(), 0.0624);
    Plato::StandardVector<double> tGoldObjectiveGradient(tData);
    PlatoTest::checkVectorData(tDataMng.getObjectiveGradient(tVectorIndex), tGoldObjectiveGradient);

    const size_t tConstraintIndex = 0;
    tGoldValue = -5.07057774290498e-6;
    double tInequalityValue = tDataMng.getCurrentConstraintValues(tConstraintIndex);
    EXPECT_NEAR(tInequalityValue, tGoldValue, tTolerance);

    tData = { -0.13778646890793422, -0.14864537557631985, -0.13565219858574704, -0.1351771199123859, -0.13908690613190111 };
    Plato::StandardVector<double> tGoldInequalityGradient(tData);
    PlatoTest::checkVectorData(tDataMng.getInequalityGradient(tVectorIndex), tGoldInequalityGradient);
}

TEST(PlatoTest, SynthesisOptimizationSubProblemOne)
{
    // ********* Allocate Core Optimization Data Templates *********
    std::shared_ptr<Plato::DataFactory<double>> tFactory = std::make_shared<Plato::DataFactory<double>>();
    const size_t tNumVectors = 1;
    const size_t tNumDual = 1;
    tFactory->allocateDual(tNumDual, tNumVectors);
    const size_t tNumStates = 1;
    tFactory->allocateState(tNumStates, tNumVectors);
    const size_t tNumControls = 880;
    tFactory->allocateControl(tNumControls, tNumVectors);

    // ********* Allocate Synthesis Optimization Sub-Problem  *********
    Plato::NonlinearProgrammingSubProblemOC<double> tSubProblem(tFactory);

    double tGold = 1e-6;
    double tValue = tSubProblem.getBisectionTolerance();
    double tTolerance = 1e-6;
    EXPECT_NEAR(tValue, tGold, tTolerance);
    tSubProblem.setBisectionTolerance(1e-1);
    tGold = 0.1;
    tValue = tSubProblem.getBisectionTolerance();
    EXPECT_NEAR(tValue, tGold, tTolerance);

    tGold = 1;
    tValue = tSubProblem.getMoveLimit();
    EXPECT_NEAR(tValue, tGold, tTolerance);
    tSubProblem.setMoveLimit(0.15);
    tGold = 0.15;
    tValue = tSubProblem.getMoveLimit();
    EXPECT_NEAR(tValue, tGold, tTolerance);

    tGold = 0.5;
    tValue = tSubProblem.getDampingPower();
    EXPECT_NEAR(tValue, tGold, tTolerance);
    tSubProblem.setDampingPower(0.25);
    tGold = 0.25;
    tValue = tSubProblem.getDampingPower();
    EXPECT_NEAR(tValue, tGold, tTolerance);

    tGold = 0;
    tValue = tSubProblem.getDualLowerBound();
    EXPECT_NEAR(tValue, tGold, tTolerance);
    tSubProblem.setDualLowerBound(0.35);
    tGold = 0.35;
    tValue = tSubProblem.getDualLowerBound();
    EXPECT_NEAR(tValue, tGold, tTolerance);

    tGold = 1e7;
    tValue = tSubProblem.getDualUpperBound();
    EXPECT_NEAR(tValue, tGold, tTolerance);
    tSubProblem.setDualUpperBound(0.635);
    tGold = 0.635;
    tValue = tSubProblem.getDualUpperBound();
    EXPECT_NEAR(tValue, tGold, tTolerance);
}

TEST(PlatoTest, SynthesisOptimizationSubProblemTwo)
{
    // ********* Allocate Core Optimization Data Templates *********
    std::shared_ptr<Plato::DataFactory<double>> tFactory = std::make_shared<Plato::DataFactory<double>>();
    const size_t tNumDual = 1;
    const size_t tNumVectors = 1;
    tFactory->allocateDual(tNumDual, tNumVectors);
    const size_t tNumStates = 1;
    tFactory->allocateState(tNumStates, tNumVectors);
    const size_t tNumControls = 880;
    tFactory->allocateControl(tNumControls, tNumVectors);

    // ********* Allocate Synthesis Optimization Sub-Problem  *********
    Plato::NonlinearProgrammingSubProblemOC<double> tSubProblem(tFactory);
    double tScalarValue = 0.2;
    tSubProblem.setMoveLimit(tScalarValue);
    tScalarValue = 1e-4;
    tSubProblem.setBisectionTolerance(tScalarValue);

    // ********* Allocate Optimality Criteria Data Manager *********
    Plato::OptimalityCriteriaDataMng<double> tDataMng(tFactory);
    PlatoTest::setSynthesisOptimizationTestData(tDataMng);

    // ********* Allocate Optimality Criteria Stage Manager *********
    Plato::OptimalityCriteriaStageMng<double> tStageMng(tFactory);

    // ********* TEST SUBPROBLEM *********
    tScalarValue = 0.01;
    tDataMng.setControlLowerBounds(tScalarValue);
    tScalarValue = 1;
    tDataMng.setControlUpperBounds(tScalarValue);
    tSubProblem.solve(tDataMng, tStageMng);

    std::vector<double> tDualData;
    std::vector<double> tControlData;
    PlatoTest::setSynthesisOptimizationTestGold(tControlData, tDualData);
    Plato::StandardVector<double> tDualGold(tDualData);
    Plato::StandardVector<double> tControlGold(tControlData);

    const size_t tVectorIndex = 0;
    PlatoTest::checkVectorData(tDataMng.getCurrentDual(), tDualGold);
    PlatoTest::checkVectorData(tDataMng.getCurrentControl(tVectorIndex), tControlGold);
}

TEST(PlatoTest, OptimalityCriteria)
{
    // ********* Allocate Core Optimization Data Templates *********
    std::shared_ptr<Plato::DataFactory<double>> tFactory = std::make_shared<Plato::DataFactory<double>>();
    const size_t tNumDual = 1;
    const size_t tNumVectors = 1;
    tFactory->allocateDual(tNumDual, tNumVectors);
    const size_t tNumStates = 1;
    tFactory->allocateState(tNumStates, tNumVectors);
    const size_t tNumControls = 2;
    tFactory->allocateControl(tNumControls, tNumVectors);

    // ********* Allocate Optimality Criteria Data Manager *********
    std::shared_ptr<Plato::OptimalityCriteriaDataMng<double>> tDataMng =
            std::make_shared<Plato::OptimalityCriteriaDataMng<double>>(tFactory);

    // ********* Set Bounds and Initial Guess *********
    double tValue = 0.5;
    tDataMng->setControlLowerBounds(tValue);
    tValue = 10;
    tDataMng->setControlUpperBounds(tValue);
    tValue = 1;
    tDataMng->setInitialGuess(tValue);

    // ********* Allocate Stage Manager *********
    std::shared_ptr<Plato::CriterionList<double>> tConstraintList = std::make_shared<Plato::CriterionList<double>>();
    std::shared_ptr<Plato::OptimalityCriteriaTestInequalityTwo<double>> tConstraint =
            std::make_shared<Plato::OptimalityCriteriaTestInequalityTwo<double>>();
    tConstraintList->add(tConstraint);
    std::shared_ptr<Plato::OptimalityCriteriaTestObjectiveTwo<double>> tObjective =
            std::make_shared<Plato::OptimalityCriteriaTestObjectiveTwo<double>>();
    std::shared_ptr<Plato::OptimalityCriteriaStageMng<double>> tStageMng =
            std::make_shared<Plato::OptimalityCriteriaStageMng<double>>(tFactory, tObjective, tConstraintList);

    // ********* Allocate Optimality Criteria Algorithm *********
    std::shared_ptr<Plato::SingleConstraintSubProblemTypeLP<double>> tSubProlem =
            std::make_shared<Plato::SingleConstraintSubProblemTypeLP<double>>(*tDataMng);
    Plato::OptimalityCriteria<double> tAlgorithm(tDataMng, tStageMng, tSubProlem);
    tAlgorithm.solve();

    size_t tVectorIndex = 0;
    const Plato::Vector<double> & tControl = tDataMng->getCurrentControl(tVectorIndex);
    double tTolerance = 1e-6;
    double tGoldControlOne = 0.5;
    EXPECT_NEAR(tControl[0], tGoldControlOne, tTolerance);
    double tGoldControlTwo = 1.375;
    EXPECT_NEAR(tControl[1], tGoldControlTwo, tTolerance);
    size_t tGoldNumIterations = 5;
    EXPECT_EQ(tAlgorithm.getNumIterationsDone(), tGoldNumIterations);
}

TEST(PlatoTest, HostOptimalityCriteriaUpdate)
{
    // ********* Allocate Data for Unit Test *********
    const size_t tNumControls = 10;
    Plato::StandardVector<double> tControl(tNumControls);

    double tValue = 0.25;
    Plato::StandardVector<double> tPrevControl(tNumControls, tValue);

    tValue = 1e-3;
    Plato::StandardVector<double> tLowerBounds(tNumControls, tValue);

    tValue = 1;
    Plato::StandardVector<double> tUpperBounds(tNumControls, tValue);

    tValue = 1e-5;
    Plato::StandardVector<double> tObjGradient(tNumControls, tValue);

    tValue = 5e-6;
    Plato::StandardVector<double> tObjInequality(tNumControls, tValue);

    const double tTrialDual = 0.5;

    // ********* Allocate Update Functor *********
    double tMoveLimit = 1e-1;
    double tScaleFactor = 0.01;
    double tDampingPower = 0.5;
    Plato::HostOptimalityCriteriaUpdate<double> tUpdate(tMoveLimit, tScaleFactor, tDampingPower);

    // ********* Call Update Functor *********
    tUpdate.update(tTrialDual, tLowerBounds, tUpperBounds, tPrevControl, tObjGradient, tObjInequality, tControl);

    // ********* Test Results *********
    tValue = 0.15;
    Plato::StandardVector<double> tControlGold(tNumControls, tValue);
    PlatoTest::checkVectorData(tControl, tControlGold);
}

} // namespace PlatoTest
